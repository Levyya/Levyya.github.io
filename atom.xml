<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Levy&#39;s blog</title>
  
  
  <link href="https://levyya.github.io/atom.xml" rel="self"/>
  
  <link href="https://levyya.github.io/"/>
  <updated>2023-01-10T12:35:53.000Z</updated>
  <id>https://levyya.github.io/</id>
  
  <author>
    <name>Levy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 常用命令</title>
    <link href="https://levyya.github.io/2023/11/12/hexo%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://levyya.github.io/2023/11/12/hexo%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-11-12T02:18:11.608Z</published>
    <updated>2023-01-10T12:35:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>Q: Hexo 图片无法加载问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image -- save</span><br></pre></td></tr></table></figure><p>TODO:</p><p><a href="https://cloud.tencent.com/developer/article/1970544">https://cloud.tencent.com/developer/article/1970544</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="博客" scheme="https://levyya.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://levyya.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Blog" scheme="https://levyya.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://levyya.github.io/2023/11/12/Vue/"/>
    <id>https://levyya.github.io/2023/11/12/Vue/</id>
    <published>2023-11-12T02:17:22.620Z</published>
    <updated>2023-06-14T12:53:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><p><a href="http://www.codeman.ink/discover/singer">网易云在线-Vue</a></p><p>PHP Web开发</p><ul><li><a href="http://laravel.p2hp.com/">Laravel</a></li></ul><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="声明周期"><a href="#声明周期" class="headerlink" title="声明周期"></a>声明周期</h3><p>开始创建、初始化数据、编译模板、挂载DOM-渲染、更新-渲染、销毁</p><p>钩子函数</p><ul><li>beforeCreate()</li><li>created()</li><li>beforeMount()</li><li>mounted()</li><li>beforeUpdate()</li><li>updated()</li><li>beforeDestory()</li><li>destroyed()</li></ul><p>MVVM (Model, View, ViewModel)</p><h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><p>V-if</p><p>V-for</p><p>v-bind</p><p>v-on</p><p>v-model</p><p>缺点：首次加载慢</p><p>计划</p><ul><li>6.7 Today</li><li>离校前<ul><li>蓝桥杯省赛</li><li>软著</li><li>投稿</li><li>商城项目&#x2F;music播放器</li><li>《代码整洁之道》</li></ul></li><li>6.16 </li><li>入职前</li><li>7.16 去杭州</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目&quot;&gt;&lt;a href=&quot;#项目&quot; class=&quot;headerlink&quot; title=&quot;项目&quot;&gt;&lt;/a&gt;项目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.codeman.ink/discover/singer&quot;&gt;网易云在线-Vue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>代码整洁之道</title>
    <link href="https://levyya.github.io/2023/06/05/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    <id>https://levyya.github.io/2023/06/05/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/</id>
    <published>2023-06-05T07:33:02.000Z</published>
    <updated>2023-06-05T08:23:37.000Z</updated>
    
    
    
    
    
    <category term="工作" scheme="https://levyya.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>LLaMA模型相关</title>
    <link href="https://levyya.github.io/2023/05/22/LLaMA%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3/"/>
    <id>https://levyya.github.io/2023/05/22/LLaMA%E6%A8%A1%E5%9E%8B%E7%9B%B8%E5%85%B3/</id>
    <published>2023-05-22T08:35:00.000Z</published>
    <updated>2023-05-23T06:26:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客主要记录2023年一些新出的大规模语言模型。</p><h2 id="LLaMA"><a href="#LLaMA" class="headerlink" title="LLaMA"></a>LLaMA</h2><p>论文<a href="https://arxiv.org/pdf/2302.13971.pdf">link</a></p><blockquote><p>摘要</p><p>我们介绍了LLaMA，一个从7B到65B参数的基础语言模型集合。我们在数万亿个tokens上训练我们的模型，并表明可以使用公开可用的数据集专门训练最先进的模型，而无需诉诸专有和不可访问的数据集。特别是，LLaMA 13B在大多数基准测试中优于GPT-3 (175B)， LLaMA65B与最好的型号Chinchilla-70B和PaLM-540B具有竞争力。我们向研究界发布了所有的模型。”</p></blockquote><p>LLaMa (羊驼) 是一个由Meta AI开源的大规模语言模型，具有如下特性：</p><ul><li>参数量从7B-65B</li><li>13B优于GPT-3</li><li>65B接近<strong>Chinchilla-70B</strong>和<strong>PaLM-540B</strong></li></ul><p>主打一个节能高效。</p><h2 id="LLaVA"><a href="#LLaVA" class="headerlink" title="LLaVA"></a>LLaVA</h2><p>多模态大模型，全程Large Language and Vision Assitant</p><p>模型结构：CLIP VIT-L&#x2F;14 + LLaMA</p><h2 id="Alpaca"><a href="#Alpaca" class="headerlink" title="Alpaca"></a>Alpaca</h2><p>斯坦福根据LLaMA 7B微调</p><h2 id="Vicuna"><a href="#Vicuna" class="headerlink" title="Vicuna"></a>Vicuna</h2><p>小羊驼，号称90%GPT-4，7B，13B</p><h2 id="ChatGLM"><a href="#ChatGLM" class="headerlink" title="ChatGLM"></a>ChatGLM</h2><p>清华，6B</p><h2 id="MiniGPT-4"><a href="#MiniGPT-4" class="headerlink" title="MiniGPT-4"></a>MiniGPT-4</h2><p>4张A100，训练10个小时</p><p>Eleuther AI</p><ul><li><p>Pythia</p></li><li><p>DINOv2</p></li></ul><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>Python Web框架</p><blockquote><p>FastAPI</p><p>Flask</p></blockquote><p><a href="https://github.com/BlinkDL/RWKV-LM">RNN with Transformer LM</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这篇博客主要记录2023年一些新出的大规模语言模型。&lt;/p&gt;
&lt;h2 id=&quot;LLaMA&quot;&gt;&lt;a href=&quot;#LLaMA&quot; class=&quot;headerlink&quot; title=&quot;LLaMA&quot;&gt;&lt;/a&gt;LLaMA&lt;/h2&gt;&lt;p&gt;论文&lt;a href=&quot;https://arxiv</summary>
      
    
    
    
    
    <category term="NLP" scheme="https://levyya.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>k8s</title>
    <link href="https://levyya.github.io/2023/04/11/k8s/"/>
    <id>https://levyya.github.io/2023/04/11/k8s/</id>
    <published>2023-04-11T08:07:51.000Z</published>
    <updated>2023-04-14T01:53:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kubernetes.io/zh-cn/">官网</a></p><p>功能：</p><p>Pod，托管应用实例，表示一组一个或多个应用程序容器，共享资源（共享存储、网络、有关每个容器如何运行的信息）</p><p><strong>TODO</strong></p><ul><li><input disabled type="checkbox"> Java</li><li><input disabled type="checkbox"> C++</li><li><input disabled type="checkbox"> 项目</li><li><input disabled type="checkbox"> Docker, k8s, 云原生</li></ul><p>实验室博客系统</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;p&gt;Pod，托管应用实例，表示一组一个或多个应用程序容器，共享资源（共享存储、网络、有关每个容器如何运行的信息）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TOD</summary>
      
    
    
    
    
    <category term="k8s" scheme="https://levyya.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>歌词--此生无可恋，唯曲悦丹田</title>
    <link href="https://levyya.github.io/2023/04/10/%E6%AD%8C%E8%AF%8D-%E6%AD%A4%E7%94%9F%E6%97%A0%E5%8F%AF%E6%81%8B%EF%BC%8C%E5%94%AF%E6%9B%B2%E6%82%A6%E4%B8%B9%E7%94%B0/"/>
    <id>https://levyya.github.io/2023/04/10/%E6%AD%8C%E8%AF%8D-%E6%AD%A4%E7%94%9F%E6%97%A0%E5%8F%AF%E6%81%8B%EF%BC%8C%E5%94%AF%E6%9B%B2%E6%82%A6%E4%B8%B9%E7%94%B0/</id>
    <published>2023-04-10T02:18:55.000Z</published>
    <updated>2023-04-10T02:21:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>是谁在聆听</p><p>是谁的声音</p><p>恍惚一生光阴</p><p>欲追梦逐影</p><p>一半是悲泣</p><p>另一半欢愉</p><p>刹那一生光景</p><p>梦叱咤风云</p><p>有谁会倾听</p><p>有谁会在意</p><p>匆匆一生如影</p><p>平半世独行</p><p>忆欢歌笑语</p><p>记咎由自取</p><p>短暂一生如雨</p><p>落土润大地</p><p>何以为见</p><p>祈宏福于乐</p><p>治词愉心眷</p><p>愈曲悦丹恋</p><p>望 星辰日月</p><p>此生无可恋</p><p>曾鲜红如血</p><p>梦炽烈如焰</p><p>何以而坚 非偏词巧言</p><p>挚语惠心田 勤守信默念</p><p>望 星辰日月 此生亦可恋</p><p>爱鲜红如血 情炽烈如焰</p><p>关于明天 愿你坚持不懈</p><p>即便前路 是无尽的黑夜</p><p>一路向前 沿途美景无边</p><p>义无反顾 理想无需多言</p><p>再多考验 都会兑换成喜悦</p><p>拼搏憧憬 为更美好的明天</p><p>woo woo woo woo</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;是谁在聆听&lt;/p&gt;
&lt;p&gt;是谁的声音&lt;/p&gt;
&lt;p&gt;恍惚一生光阴&lt;/p&gt;
&lt;p&gt;欲追梦逐影&lt;/p&gt;
&lt;p&gt;一半是悲泣&lt;/p&gt;
&lt;p&gt;另一半欢愉&lt;/p&gt;
&lt;p&gt;刹那一生光景&lt;/p&gt;
&lt;p&gt;梦叱咤风云&lt;/p&gt;
&lt;p&gt;有谁会倾听&lt;/p&gt;
&lt;p&gt;有谁会在意</summary>
      
    
    
    
    
    <category term="歌词" scheme="https://levyya.github.io/tags/%E6%AD%8C%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>软考--系统架构师</title>
    <link href="https://levyya.github.io/2023/04/02/%E8%BD%AF%E8%80%83-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    <id>https://levyya.github.io/2023/04/02/%E8%BD%AF%E8%80%83-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%B8%88/</id>
    <published>2023-04-02T06:21:03.000Z</published>
    <updated>2023-04-02T06:27:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备考时间"><a href="#备考时间" class="headerlink" title="备考时间"></a>备考时间</h2><p>start:  2023.4.2</p><p>考试时间：2023.5.27</p><p>备考资料：《系统架构设计师教程（第4版）》</p><h2 id="计组"><a href="#计组" class="headerlink" title="计组"></a>计组</h2><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h2 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h2><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h2 id="系统性能评价"><a href="#系统性能评价" class="headerlink" title="系统性能评价"></a>系统性能评价</h2><h2 id="开发方法"><a href="#开发方法" class="headerlink" title="开发方法"></a>开发方法</h2><h2 id="系统规划"><a href="#系统规划" class="headerlink" title="系统规划"></a>系统规划</h2><h2 id="系统分析与设计方法"><a href="#系统分析与设计方法" class="headerlink" title="系统分析与设计方法"></a>系统分析与设计方法</h2><h2 id="软件架构设计"><a href="#软件架构设计" class="headerlink" title="软件架构设计"></a>软件架构设计</h2><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h2 id="测试评审方法"><a href="#测试评审方法" class="headerlink" title="测试评审方法"></a>测试评审方法</h2><h2 id="嵌入式系统设计"><a href="#嵌入式系统设计" class="headerlink" title="嵌入式系统设计"></a>嵌入式系统设计</h2><h2 id="开发管理"><a href="#开发管理" class="headerlink" title="开发管理"></a>开发管理</h2><h2 id="信息系统基础知识"><a href="#信息系统基础知识" class="headerlink" title="信息系统基础知识"></a>信息系统基础知识</h2><h2 id="基于中间件的开发"><a href="#基于中间件的开发" class="headerlink" title="基于中间件的开发"></a>基于中间件的开发</h2><h2 id="安全性和保密性设计"><a href="#安全性和保密性设计" class="headerlink" title="安全性和保密性设计"></a>安全性和保密性设计</h2><h2 id="系统的可靠性分析与设计"><a href="#系统的可靠性分析与设计" class="headerlink" title="系统的可靠性分析与设计"></a>系统的可靠性分析与设计</h2><h2 id="软件的知识产权保护"><a href="#软件的知识产权保护" class="headerlink" title="软件的知识产权保护"></a>软件的知识产权保护</h2><h2 id="标准化知识"><a href="#标准化知识" class="headerlink" title="标准化知识"></a>标准化知识</h2><h2 id="应用数学"><a href="#应用数学" class="headerlink" title="应用数学"></a>应用数学</h2><h2 id="虚拟化、云计算、物联网"><a href="#虚拟化、云计算、物联网" class="headerlink" title="虚拟化、云计算、物联网"></a>虚拟化、云计算、物联网</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;备考时间&quot;&gt;&lt;a href=&quot;#备考时间&quot; class=&quot;headerlink&quot; title=&quot;备考时间&quot;&gt;&lt;/a&gt;备考时间&lt;/h2&gt;&lt;p&gt;start:  2023.4.2&lt;/p&gt;
&lt;p&gt;考试时间：2023.5.27&lt;/p&gt;
&lt;p&gt;备考资料：《系统架构设计师教程（</summary>
      
    
    
    
    
    <category term="软考" scheme="https://levyya.github.io/tags/%E8%BD%AF%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯</title>
    <link href="https://levyya.github.io/2023/03/20/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    <id>https://levyya.github.io/2023/03/20/%E8%93%9D%E6%A1%A5%E6%9D%AF/</id>
    <published>2023-03-20T03:06:09.000Z</published>
    <updated>2023-04-25T09:46:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="T2110-积木画"><a href="#T2110-积木画" class="headerlink" title="T2110 积木画"></a>T2110 积木画</h2><p>注意求余，中间计算过程也需要%mod</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res = (dp2 * <span class="number">2</span> % mod + dp0) % mod;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 请在此输入您的代码</span></span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  cin &gt;&gt; n;</span><br><span class="line">  <span class="type">int</span> dp0 = <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> dp1 = <span class="number">2</span>;</span><br><span class="line">  <span class="type">int</span> dp2 = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) cout &lt;&lt; dp0;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) cout &lt;&lt; dp1;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">3</span>) cout &lt;&lt; dp2;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    n -= <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      n--;</span><br><span class="line">      res = (dp2 * <span class="number">2</span> % mod + dp0) % mod;</span><br><span class="line">      dp0 = dp1;</span><br><span class="line">      dp1 = dp2;</span><br><span class="line">      dp2 = res;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="P3802-小魔女帕琪"><a href="#P3802-小魔女帕琪" class="headerlink" title="P3802 小魔女帕琪"></a>P3802 小魔女帕琪</h3><p><a href="https://www.luogu.com.cn/problem/P3802">link</a></p><p>计算期望</p><ul><li>setprecision的头文件 <code>iomanip</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">7</span>];</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">sum += a[i];</span><br><span class="line"><span class="keyword">if</span> (a[i] == <span class="number">0</span>) &#123;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// res = 7! a1*...*a7 / (N*...*N-6)</span></span><br><span class="line"><span class="keyword">if</span> (res != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">7</span>; i++) &#123;</span><br><span class="line">res = res * i * a[i<span class="number">-1</span>] * <span class="number">1.0</span> / sum ;</span><br><span class="line">sum--;</span><br><span class="line">&#125;</span><br><span class="line">res *= (sum + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">3</span>) &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P1551-亲戚-并查集模板题"><a href="#P1551-亲戚-并查集模板题" class="headerlink" title="P1551 亲戚 (并查集模板题)"></a>P1551 亲戚 (并查集模板题)</h2><p><a href="https://www.luogu.com.cn/problem/P1551">link</a></p><ul><li>memset 需要包含头文件<code>cstring</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n, m, p;</span><br><span class="line"><span class="type">int</span> fa[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == fa[x]) &#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line"><span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span> fa);</span><br><span class="line"><span class="comment">//fill(fa, fa+n+1, 0);</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">fa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pb-ds库"><a href="#pb-ds库" class="headerlink" title="pb_ds库"></a>pb_ds库</h2><p><strong>哈希表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br></pre></td></tr></table></figure><p>两种哈希表</p><ul><li>cc_hash_table  拉链法</li><li>gp_hash_table  查探法</li></ul><p><strong>堆</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line">__gnu_pbds::priority_queue&lt;<span class="type">int</span>&gt;q;<span class="comment">//因为放置和std重复，故需要带上命名空间</span></span><br><span class="line">__gnu_pbds::priority_queue&lt;<span class="type">int</span>,greater&lt;<span class="type">int</span>&gt;,pairing_heap_tag&gt; pq;<span class="comment">//最快</span></span><br><span class="line">__gnu_pbds::priority_queue&lt;<span class="type">int</span>,greater&lt;<span class="type">int</span>&gt;,binary_heap_tag&gt; pq;</span><br><span class="line">__gnu_pbds::priority_queue&lt;<span class="type">int</span>,greater&lt;<span class="type">int</span>&gt;,binomial_heap_tag&gt; pq;</span><br><span class="line">__gnu_pbds::priority_queue&lt;<span class="type">int</span>,greater&lt;<span class="type">int</span>&gt;,rc_binomial_heap_tag&gt; pq;</span><br><span class="line">__gnu_pbds::priority_queue&lt;<span class="type">int</span>,greater&lt;<span class="type">int</span>&gt;,thin_heap_tag&gt; pq;</span><br><span class="line">__gnu_pbds::priority_queue&lt;<span class="type">int</span>,greater&lt;<span class="type">int</span>&gt; &gt; pq;</span><br></pre></td></tr></table></figure><p><strong>红黑树</strong></p><h2 id="P1337-JSOI2004-平衡点-模拟退火"><a href="#P1337-JSOI2004-平衡点-模拟退火" class="headerlink" title="P1337 [JSOI2004] 平衡点 (模拟退火)"></a>P1337 [JSOI2004] 平衡点 (模拟退火)</h2><ul><li><a href="https://www.luogu.com.cn/problem/P1337">题目</a></li><li><a href="https://oi-wiki.org//misc/simulated-annealing/">资料</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> resx, resy, resw;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y, w;</span><br><span class="line">&#125;obj[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">energy</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">double</span> dx = obj[i].x - x;</span><br><span class="line"><span class="type">double</span> dy = obj[i].y - y;</span><br><span class="line">res += <span class="built_in">sqrt</span>(dx*dx + dy*dy) * obj[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">simulateAnneal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">double</span> t = <span class="number">20230402</span>;</span><br><span class="line"><span class="keyword">while</span> (t &gt; <span class="number">1e-15</span>) &#123;</span><br><span class="line"><span class="type">double</span> nx = resx + t * (<span class="built_in">rand</span>() * <span class="number">2</span> - RAND_MAX);</span><br><span class="line"><span class="type">double</span> ny = resy + t * (<span class="built_in">rand</span>() * <span class="number">2</span> - RAND_MAX);</span><br><span class="line"><span class="type">double</span> nw = <span class="built_in">energy</span>(nx, ny);</span><br><span class="line"><span class="type">double</span> delta = nw - resw;</span><br><span class="line"><span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">resw = nw;</span><br><span class="line">resx = nx;</span><br><span class="line">resy = ny;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">exp</span>(- delta / t) * RAND_MAX &gt; <span class="built_in">rand</span>()) &#123;</span><br><span class="line">resx = nx;</span><br><span class="line">resy = ny;</span><br><span class="line">&#125;</span><br><span class="line">t *= <span class="number">0.996</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;obj[i].x, &amp;obj[i].y, &amp;obj[i].w);</span><br><span class="line">resx += obj[i].x;</span><br><span class="line">resy += obj[i].y;</span><br><span class="line">&#125;</span><br><span class="line">resx /= n;</span><br><span class="line">resy /= n;</span><br><span class="line">resw = <span class="built_in">energy</span>(resx, resy);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="built_in">simulateAnneal</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">3</span>) &lt;&lt; resx &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; resy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p><a href="https://www.luogu.com.cn/training/116257#information">题单</a></p><h2 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h2><h3 id="十三届"><a href="#十三届" class="headerlink" title="十三届"></a>十三届</h3><p>重复的数</p><p>考点：莫队</p><p>数的拆分</p><p>考点：素筛</p><p>扫描游戏</p><p>考点：线段树</p><p>全排列的价值</p><p>考点：数学</p><p>爬树的甲壳虫</p><p>考点：递推+拓展欧几里得求逆元</p><p>GCD</p><p>考点：gcd性质</p><p>选数异或</p><p>考点：dp + map</p><p>质因数个数</p><p>考点：质数性质</p><p>灭鼠先锋</p><p>考点：博弈论</p><h3 id="十二届"><a href="#十二届" class="headerlink" title="十二届"></a>十二届</h3><p>分果果</p><p>考点：dp</p><p>双向排序</p><p>考点：栈 or 线段树</p><p>异或数列</p><p>考点：异或</p><p>砝码称重</p><p>考点：set</p><p>时间显示</p><p>考点：时间处理</p><p>回路计数</p><p>考点：哈密顿回路，状压dp</p><p>路径</p><p>考点：最短路径</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="初赛结果"><a href="#初赛结果" class="headerlink" title="初赛结果"></a>初赛结果</h2><p>2023.04.23 湖南省研究生一等奖</p><h2 id="国赛准备"><a href="#国赛准备" class="headerlink" title="国赛准备"></a>国赛准备</h2><p>分石头：博弈论</p><p>括号序列树：树形dp</p><p>广场舞：数论、离散化</p><p>取模：暴力</p><p>数组操作：线段树</p><p>第八大奇迹：树状数组、二分</p><p>轨道炮：贪心、模拟</p><p>填字母游戏：博弈</p><p>估计人数：匈牙利算法、最小路径覆盖、网络流</p><p>切开字符串：Manacher、哈希、平衡树</p><p>翻转括号序列：线段树</p><p>Log大侠：线段树</p><p>异或三角：数位DP</p><p>蓝跳跳：动态规划、循环数组</p><p>区间移位：二分、枚举</p><p>补给：</p><p>冰山：</p><p>积木：NTT、生成函数、快速幂</p><p>铁路建设：</p><p>生成树计数：状压DP、矩阵快速幂、矩阵树定理</p><p>奇偶覆盖：扫描线、线段树</p><p>二进制问题：数位DP</p><p>迷宫：</p><p>车轮轴迹：计算几何</p><p>质数行者：DP</p><p>游园安排：动态规划</p><p>出租车：</p><p>123：二分</p><p>路径之谜：DFS</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;T2110-积木画&quot;&gt;&lt;a href=&quot;#T2110-积木画&quot; class=&quot;headerlink&quot; title=&quot;T2110 积木画&quot;&gt;&lt;/a&gt;T2110 积木画&lt;/h2&gt;&lt;p&gt;注意求余，中间计算过程也需要%mod&lt;/p&gt;
&lt;figure class=&quot;high</summary>
      
    
    
    
    
    <category term="比赛" scheme="https://levyya.github.io/tags/%E6%AF%94%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>服务器运维</title>
    <link href="https://levyya.github.io/2023/03/19/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    <id>https://levyya.github.io/2023/03/19/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/</id>
    <published>2023-03-19T05:47:09.000Z</published>
    <updated>2023-03-19T06:24:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器运维关注的问题"><a href="#服务器运维关注的问题" class="headerlink" title="服务器运维关注的问题"></a>服务器运维关注的问题</h2><blockquote><p>以下是一些服务器运维需要关注的问题：</p><ol><li>安全性：确保服务器的安全是非常重要的，可以采取一些措施，比如配置防火墙、使用加密通信协议等来保障服务器的安全。</li><li>稳定性：服务器应该具有高可靠性和稳定性，以确保应用程序的正常运行，可以通过监控服务器状态、自动化部署等方式来提高服务器的稳定性。</li><li>资源管理：服务器资源的管理也是关键，包括 CPU、内存、磁盘、网络等，需要对资源使用情况进行监控和管理，以优化服务器性能和资源利用率。</li><li>日志管理：服务器日志可以帮助我们诊断和解决问题，需要设置正确的日志级别、定期清理日志文件等，以便更好地管理服务器。</li><li>应用程序部署和升级：在服务器上部署和升级应用程序是一项重要任务，需要确保应用程序可以正确地运行，并及时更新和升级应用程序，以提高应用程序的性能和安全性。</li><li>数据备份和恢复：服务器上的数据备份是非常重要的，以便在发生灾难性事件时可以快速恢复数据，并保证业务的连续性。</li><li>网络性能：服务器的网络性能也是关键，需要保证网络带宽、延迟和稳定性，以提供良好的用户体验和应用程序性能。</li><li>负载均衡：负载均衡是提高应用程序性能和稳定性的重要手段，需要使用负载均衡器来分发流量，并根据实际情况进行负载均衡策略的优化。</li></ol><p>以上是一些服务器运维需要关注的问题，对于不同的应用场景和需求，还可能存在其他需要关注的问题。</p></blockquote><h2 id="学习路线"><a href="#学习路线" class="headerlink" title="学习路线"></a>学习路线</h2><blockquote><p>以下是一些服务器运维学习路线的建议：</p><ol><li>熟悉 Linux 操作系统的基础知识，包括文件系统、进程管理、网络配置等。</li><li>掌握 Linux 命令行的使用，如文件操作、进程管理、网络配置等。</li><li>学习 Shell 脚本编程，以便自动化一些运维任务。</li><li>学习常见的 Web 服务器的安装、配置和管理，如 Apache、Nginx 等。</li><li>学习常见的数据库的安装、配置和管理，如 MySQL、PostgreSQL 等。</li><li>学习常见的缓存技术的安装、配置和管理，如 Redis、Memcached 等。</li><li>学习常见的监控和日志管理工具的使用，如 Nagios、Zabbix、Grafana、Logrotate 等。</li><li>学习常见的容器技术的使用，如 Docker、Kubernetes 等。</li><li>学习常见的自动化部署工具的使用，如 Ansible、Puppet、Chef 等。</li><li>不断关注新技术和新工具的发展，并及时学习和掌握。</li></ol></blockquote><h2 id="常用的Linux运维命令"><a href="#常用的Linux运维命令" class="headerlink" title="常用的Linux运维命令"></a>常用的Linux运维命令</h2><p><strong>常用的 Linux 运维命令</strong>：</p><blockquote><ol><li>ps：查看当前系统进程，如 ps -ef。</li><li>top：实时查看系统运行状态和进程占用资源情况，如 top。</li><li>netstat：查看网络连接状态，如 netstat -an。</li><li>ifconfig：查看网络接口信息和配置 IP 地址等，如 ifconfig eth0。</li><li>ping：测试网络连通性，如 ping <a href="http://www.baidu.com./">www.baidu.com。</a></li><li>scp：远程复制文件，如 scp &#x2F;path&#x2F;to&#x2F;local&#x2F;file user@remote:&#x2F;path&#x2F;to&#x2F;remote&#x2F;file。</li><li>ssh：远程登录到服务器，如 ssh user@remote。</li><li>crontab：设置定时任务，如 crontab -e。</li><li>tar：打包和压缩文件，如 tar -czvf file.tar.gz &#x2F;path&#x2F;to&#x2F;file。</li><li>rsync：远程同步文件，如 rsync -avz &#x2F;path&#x2F;to&#x2F;local&#x2F;file user@remote:&#x2F;path&#x2F;to&#x2F;remote&#x2F;file。</li><li>systemctl：管理系统服务，如 systemctl start&#x2F;stop&#x2F;restart&#x2F;status service。</li><li>journalctl：查看系统日志，如 journalctl -u service。</li></ol><p>以上是常用的 Linux 运维命令，根据实际情况和需求，可能会有所不同。</p></blockquote><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p><strong>常用的Docker命令</strong>：</p><blockquote><ol><li>docker run：启动一个新的容器。</li><li>docker ps：列出正在运行的容器。</li><li>docker images：列出所有的镜像。</li><li>docker stop：停止一个或多个正在运行的容器。</li><li>docker rm：删除一个或多个容器。</li><li>docker rmi：删除一个或多个镜像。</li><li>docker pull：下载一个镜像。</li><li>docker push：上传一个镜像。</li><li>docker logs：查看一个容器的日志。</li><li>docker exec：在运行中的容器中执行命令。</li><li>docker inspect：查看一个容器或镜像的详细信息。</li><li>docker build：使用Dockerfile构建镜像。</li><li>docker-compose：使用docker-compose.yml文件定义和运行多个容器的应用程序。</li></ol><p>这些命令是使用Docker时最常用的命令。使用这些命令，可以管理容器和镜像，并进行常见操作，如启动和停止容器、构建和上传镜像、查看容器和镜像的详细信息等。</p></blockquote><h2 id="K8s"><a href="#K8s" class="headerlink" title="K8s"></a>K8s</h2><p><strong>K8s介绍</strong></p><blockquote><p>Kubernetes（k8s）是一个用于容器化应用程序部署、管理和自动化的开源平台，它能够自动化应用程序的部署、扩展和管理，并提供负载均衡、自动伸缩、故障恢复等功能。以下是 k8s 可以做的一些事情：</p><ol><li>部署和管理容器化应用程序：k8s 可以自动化地部署和管理容器化应用程序，确保应用程序在集群中的运行状态。</li><li>自动化应用程序的扩展：k8s 可以根据应用程序的负载情况自动扩展或缩小应用程序的副本数量，以满足用户需求。</li><li>负载均衡：k8s 提供了负载均衡的功能，可以将流量分配到不同的容器或副本中，提高应用程序的可用性和性能。</li><li>服务发现和服务管理：k8s 可以自动发现并管理集群中的服务，确保应用程序可以相互通信，并提供 DNS 名称解析等功能。</li><li>故障恢复：k8s 可以监控应用程序的运行状态，并在容器出现故障时自动进行故障转移和恢复，保证应用程序的稳定性和可靠性。</li><li>滚动升级和回滚：k8s 可以帮助用户进行无缝的应用程序升级和回滚，保证应用程序在升级过程中的可用性。</li><li>多租户支持：k8s 可以支持多租户模式，允许不同的用户或团队使用同一个 k8s 集群，并为他们提供独立的环境和资源隔离。</li></ol><p>总之，k8s 可以帮助用户自动化、简化和优化应用程序的部署、管理和运维，提高应用程序的可用性、性能和可靠性。</p></blockquote><p><strong>基本概念</strong>：</p><blockquote><ol><li>Pod：最小的可部署单元，由一个或多个容器组成，并共享网络和存储资源。</li><li>ReplicaSet：用于创建和管理多个 Pod 副本的控制器。</li><li>Deployment：用于管理 ReplicaSet 和 Pod 的声明式配置对象。</li><li>Service：暴露应用程序的网络服务，并为 Pod 集群提供一个固定的 IP 地址和 DNS 名称。</li><li>Volume：用于在 Pod 中存储数据的抽象。</li><li>Namespace：用于在 Kubernetes 集群中创建虚拟集群的隔离机制。</li><li>ConfigMap：用于存储应用程序配置信息的对象。</li><li>Secret：用于存储敏感信息（如密码和密钥）的对象。</li><li>Node：Kubernetes 集群中的一个工作节点，可以是物理机器或虚拟机。</li><li>Cluster：由多个 Node 组成的 Kubernetes 集群，用于运行和管理容器化应用程序。</li></ol></blockquote><p><strong>常用的 Kubernetes 命令</strong>：</p><blockquote><ol><li>kubectl create：创建资源。</li><li>kubectl get：获取资源列表。</li><li>kubectl describe：获取资源的详细信息。</li><li>kubectl delete：删除资源。</li><li>kubectl apply：应用或更新资源配置。</li><li>kubectl scale：扩展或缩小 Pod 数量。</li><li>kubectl logs：获取 Pod 日志。</li><li>kubectl exec：在容器中执行命令。</li><li>kubectl port-forward：将 Kubernetes Pod 中的端口转发到本地机器。</li><li>kubectl rollout：管理滚动升级。</li><li>kubectl config：管理 Kubernetes 配置文件。</li><li>kubectl version：查看 Kubernetes 版本信息。</li></ol><p>这些命令是使用 Kubernetes 时最常用的命令。使用这些命令，可以管理 Kubernetes 资源，并进行常见操作，如创建和删除资源、获取资源的详细信息、扩展和缩小 Pod 数量、获取 Pod 日志、在容器中执行命令等。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;服务器运维关注的问题&quot;&gt;&lt;a href=&quot;#服务器运维关注的问题&quot; class=&quot;headerlink&quot; title=&quot;服务器运维关注的问题&quot;&gt;&lt;/a&gt;服务器运维关注的问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;以下是一些服务器运维需要关注的问题：&lt;/p&gt;
&lt;o</summary>
      
    
    
    
    
    <category term="默认标签" scheme="https://levyya.github.io/tags/%E9%BB%98%E8%AE%A4%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>对话系统</title>
    <link href="https://levyya.github.io/2023/03/19/%E5%AF%B9%E8%AF%9D%E7%B3%BB%E7%BB%9F/"/>
    <id>https://levyya.github.io/2023/03/19/%E5%AF%B9%E8%AF%9D%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-03-19T05:22:33.000Z</published>
    <updated>2023-03-19T12:17:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ChatGPT意见"><a href="#ChatGPT意见" class="headerlink" title="ChatGPT意见"></a>ChatGPT意见</h2><blockquote><p>构造一个对话系统通常需要以下步骤：</p><ol><li>数据收集：收集对话数据，可以是聊天记录、对话语料库或其他相关数据。数据应该涵盖尽可能多的话题和情景，以便系统能够更好地理解和回答用户的问题。</li><li>数据清洗和预处理：对收集到的数据进行清洗和预处理，包括去除重复数据、噪声数据和无效数据，并进行分词、词性标注、实体识别等自然语言处理预处理工作。</li><li>构建对话管理器：对话管理器是对话系统的核心组件，它决定了对话系统如何回答用户的问题。对话管理器可以是基于规则的系统，也可以是基于机器学习的系统，其中包括强化学习和监督学习等方法。基于规则的对话管理器需要手动编写规则和模板来回答用户的问题，而基于机器学习的对话管理器则需要训练模型来学习如何回答用户的问题。</li><li>构建自然语言理解模型：自然语言理解模型负责将用户的自然语言输入转换为计算机可以理解的语言。这可以通过基于规则的方法，如正则表达式和词汇表匹配，也可以通过基于机器学习的方法，如深度学习模型，例如 RNN 和 Transformer 来实现。</li><li>构建自然语言生成模型：自然语言生成模型负责将对话管理器生成的计算机语言转换为自然语言输出。自然语言生成模型可以基于模板，规则或者深度学习模型来实现。</li><li>用户界面设计：构建用户交互界面，提供用户友好的对话体验。可以是文本对话、语音对话或图形化界面，可以使用第三方的聊天框架或自行开发。</li><li>集成和部署：将对话管理器、自然语言理解模型、自然语言生成模型和用户界面集成到一个完整的对话系统中，并进行测试和部署。</li></ol><p>总之，构建对话系统是一个复杂的过程，需要多个组件和技术的集成。需要根据应用场景和用户需求来选择最合适的技术和算法。</p></blockquote><h2 id="词性标注"><a href="#词性标注" class="headerlink" title="词性标注"></a>词性标注</h2><blockquote><p>词性标注通常使用标准的标签集来表示不同的词性类别。不同的标签集在不同的任务和场景下有不同的使用，常见的标签集包括以下几种：</p><ol><li>布朗标签集（Brown Corpus tagset）：布朗标签集是最早的词性标注标签集之一，包括87个不同的标签，例如名词（NN）、动词（VB）、形容词（JJ）等。</li><li>通用标签集（Universal POS tagset）：通用标签集是一种精简的标签集，共包含17个不同的标签，例如名词（NOUN）、动词（VERB）、形容词（ADJ）等，适用于多种自然语言处理任务。</li><li>丹麦标签集（Danish tagset）：丹麦标签集是适用于丹麦语的词性标注标签集，包括56个不同的标签，例如名词（NN）、动词（VB）、形容词（JJ）等。</li></ol><p>以下是常见词性标注标签的解释和示例：</p><ul><li>NN：名词（Noun），如 “book”、”music”、”idea”</li><li>VB：动词（Verb），如 “run”、”eat”、”talk”</li><li>JJ：形容词（Adjective），如 “happy”、”big”、”interesting”</li><li>RB：副词（Adverb），如 “quickly”、”often”、”very”</li><li>IN：介词（Preposition），如 “in”、”on”、”at”</li><li>PRP：代词（Pronoun），如 “I”、”you”、”they”</li><li>DT：冠词（Determiner），如 “a”、”an”、”the”</li><li>CC：连词（Conjunction），如 “and”、”or”、”but”</li><li>CD：基数词（Cardinal Number），如 “one”、”two”、”three”</li><li>EX：存在句型（Existential there），如 “there is”、”there are”</li><li>FW：外来词（Foreign Word），如 “c’est”、”s’il vous plaît”</li><li>MD：情态动词（Modal Verb），如 “can”、”should”、”will”</li><li>POS：所有格标记（Possessive Ending），如 “‘s”</li><li>TO：不定式标志（to），如 “to go”、”to do”</li><li>UH：感叹词（Interjection），如 “oh”、”wow”、”ah”</li><li>WP：疑问代词（Wh-pronoun），如 “what”、”who”、”which”</li><li>WRB：疑问副词（Wh-adverb），如 “when”、”why”、”where”</li></ul><p>需要注意的是，不同的标签集可能存在一些差异，因此在使用时需要根据实际情况选择合适的标签集。</p></blockquote><p>数据集</p><blockquote><p>对话系统的训练数据集通常包括以下几种类型：</p><ol><li>人工构建的对话数据集：这种数据集是由人工创建的，通常需要专业的领域知识和技能。例如，有些公司会雇用人员编写特定主题的对话，或者请专业的演员录制对话，以构建训练数据集。</li><li>开放域对话数据集：这种数据集通常包括开放式的对话，可以包括各种主题和场景，例如Twitter、Reddit等社交媒体上的对话。其中比较著名的包括Cornell Movie Dialogs Corpus、Persona-Chat、DialoGPT等。</li><li>特定领域的对话数据集：这种数据集针对特定领域的对话，例如医疗保健、金融、法律等等。这种数据集的优点是能够训练出专门针对某一特定领域的对话系统。比较著名的包括Stanford’s Multi-Domain Dialogue Dataset、CoQA等。</li><li>技术支持和客服对话数据集：这种数据集是根据用户与技术支持和客服的对话记录构建的。例如Microsoft Research Asia的MSDialog、Alibaba’s E-commerce Dialogue Corpus等。</li><li>生成式对话数据集：这种数据集包括生成对话，即由对话系统生成的对话。这种数据集通常需要使用对话生成技术，例如Seq2Seq、GAN等生成模型来生成。</li></ol><p>以上数据集都可以通过各种方式获得，例如从公共数据集库中下载、从在线社区中抓取、从企业内部系统中收集等等。不同的数据集类型都有不同的优点和缺点，选择合适的数据集需要根据对话系统的目标任务、应用场景和需求来进行选择。</p></blockquote><p>基于GPT-2的对话系统模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransformerDialogModel</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model_name_or_path, num_layers=<span class="number">2</span>, hidden_size=<span class="number">768</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(TransformerDialogModel, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.tokenizer = GPT2Tokenizer.from_pretrained(model_name_or_path)</span><br><span class="line">        self.transformer = GPT2LMHeadModel.from_pretrained(model_name_or_path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将原始transformer解码器替换为多层解码器</span></span><br><span class="line">        decoder_layers = nn.ModuleList()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_layers):</span><br><span class="line">            decoder_layer = nn.TransformerDecoderLayer(hidden_size, nhead=<span class="number">12</span>, dropout=<span class="number">0.1</span>)</span><br><span class="line">            decoder_layers.append(decoder_layer)</span><br><span class="line">        self.transformer.transformer.decoder.layers = decoder_layers</span><br><span class="line"></span><br><span class="line">        self.transformer.lm_head.weight = self.transformer.transformer.wte.weight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_ids, attention_mask=<span class="literal">None</span>, past=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> past <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            output = self.transformer(input_ids, past_key_values=past, attention_mask=attention_mask)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output = self.transformer(input_ids, attention_mask=attention_mask)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate</span>(<span class="params">self, input_str, max_length=<span class="number">50</span></span>):</span><br><span class="line">        input_ids = self.tokenizer.encode(input_str, return_tensors=<span class="string">&#x27;pt&#x27;</span>)</span><br><span class="line">        output = self.transformer.generate(input_ids, max_length=max_length)</span><br><span class="line">        output_str = self.tokenizer.decode(output[<span class="number">0</span>], skip_special_tokens=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> output_str</span><br></pre></td></tr></table></figure><h2 id="基于强化学习的预训练语言模型"><a href="#基于强化学习的预训练语言模型" class="headerlink" title="基于强化学习的预训练语言模型"></a>基于强化学习的预训练语言模型</h2><p>近年来，基于强化学习的预训练语言模型不断涌现，以下是其中几个比较著名的模型：</p><ol><li>GPT-3: 是由OpenAI开发的一种基于Transformer架构的预训练语言模型，采用无监督学习方式进行预训练。GPT-3在各种NLP任务上取得了非常优异的表现，成为了目前最具代表性的预训练语言模型之一。</li><li>T5: 是由Google Brain团队开发的一种基于Transformer架构的预训练语言模型，采用无监督学习方式进行预训练，同时支持多种任务的迁移学习。T5在各种NLP任务上的表现也非常优秀。</li><li>XLNet: 是由Carnegie Mellon大学和Google Brain团队联合开发的一种基于Transformer架构的预训练语言模型，采用无监督学习方式进行预训练，通过使用一种新的自回归算法来优化模型的性能。XLNet在各种NLP任务上的表现也非常出色。</li><li>Reformer: 是由Google Research团队开发的一种基于Transformer架构的预训练语言模型，采用无监督学习方式进行预训练。Reformer通过引入一种新的稀疏注意力机制来优化模型的性能，具有更高的训练速度和更低的内存消耗。</li></ol><p>以上这些模型在自然语言处理领域具有非常重要的地位，它们的出现推动了自然语言处理技术的不断发展和进步。</p><h2 id="强化学习方法优化语言模型"><a href="#强化学习方法优化语言模型" class="headerlink" title="强化学习方法优化语言模型"></a>强化学习方法优化语言模型</h2><p>好的，以下是使用强化学习方法优化语言模型参数的示例代码，其中我们使用PyTorch实现。</p><p>首先，我们需要定义一个智能体（Agent），它通过与环境（即生成的文本）交互来学习生成高质量的文本。在本例中，我们使用基于策略梯度的Actor-Critic方法来训练智能体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch.distributions <span class="keyword">import</span> Categorical</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ActorCriticAgent</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vocab_size, hidden_size, num_layers</span>):</span><br><span class="line">        <span class="built_in">super</span>(ActorCriticAgent, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.embedding = nn.Embedding(vocab_size, hidden_size)</span><br><span class="line">        self.lstm = nn.LSTM(hidden_size, hidden_size, num_layers, batch_first=<span class="literal">True</span>)</span><br><span class="line">        self.actor = nn.Linear(hidden_size, vocab_size)</span><br><span class="line">        self.critic = nn.Linear(hidden_size, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, inputs, hidden=<span class="literal">None</span></span>):</span><br><span class="line">        embedding = self.embedding(inputs)</span><br><span class="line">        lstm_out, hidden = self.lstm(embedding, hidden)</span><br><span class="line">        logits = self.actor(lstm_out)</span><br><span class="line">        value = self.critic(lstm_out)</span><br><span class="line">        <span class="keyword">return</span> logits, value, hidden</span><br></pre></td></tr></table></figure><p>接下来，我们需要定义一个环境（Environment），即生成文本的任务。在本例中，我们使用一个简单的环境，它会随机生成一个固定长度的文本，然后计算文本的质量得分作为奖励（reward）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextGenerationEnvironment</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, max_len</span>):</span><br><span class="line">        self.max_len = max_len</span><br><span class="line">        self.target = <span class="string">&#x27;&#x27;</span>.join(random.choice(string.ascii_lowercase) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(max_len))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        self.current_text = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.current_text</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">step</span>(<span class="params">self, action</span>):</span><br><span class="line">        self.current_text += action</span><br><span class="line">        done = <span class="built_in">len</span>(self.current_text) &gt;= self.max_len</span><br><span class="line">        reward = self.get_reward()</span><br><span class="line">        <span class="keyword">return</span> self.current_text, reward, done</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_reward</span>(<span class="params">self</span>):</span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.current_text):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(self.target) <span class="keyword">and</span> c == self.target[i]:</span><br><span class="line">                score += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> score / <span class="built_in">len</span>(self.target)</span><br></pre></td></tr></table></figure><p>最后，我们可以使用Actor-Critic算法来训练智能体，以优化语言模型的参数。以下是训练过程的示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">env = TextGenerationEnvironment(max_len=<span class="number">10</span>)</span><br><span class="line">agent = ActorCriticAgent(vocab_size=<span class="number">26</span>, hidden_size=<span class="number">64</span>, num_layers=<span class="number">2</span>)</span><br><span class="line">optimizer = optim.Adam(agent.parameters(), lr=<span class="number">1e-3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    state = env.reset()</span><br><span class="line">    log_probs = []</span><br><span class="line">    values = []</span><br><span class="line">    rewards = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        logits, value, hidden = agent(torch.LongTensor([<span class="built_in">ord</span>(c) - <span class="number">97</span> <span class="keyword">for</span> c <span class="keyword">in</span> state]))</span><br><span class="line">        dist = Categorical(logits=logits)</span><br><span class="line">        action = dist.sample()</span><br><span class="line">        log_prob = dist.log_prob(action)</span><br><span class="line">        state, reward, done = env.step(<span class="built_in">chr</span>(action.item() + <span class="number">97</span>))</span><br><span class="line">        log_probs.append(log_prob)</span><br><span class="line">        values.append(value)</span><br><span class="line">        rewards.append(reward)</span><br><span class="line">        <span class="keyword">if</span> done:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    returns = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> rewards[::-<span class="number">1</span>]:</span><br><span class="line">        ...</span><br><span class="line">       </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ChatGPT意见&quot;&gt;&lt;a href=&quot;#ChatGPT意见&quot; class=&quot;headerlink&quot; title=&quot;ChatGPT意见&quot;&gt;&lt;/a&gt;ChatGPT意见&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;构造一个对话系统通常需要以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;l</summary>
      
    
    
    
    
    <category term="NLP" scheme="https://levyya.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT--talk (1) QNLP</title>
    <link href="https://levyya.github.io/2023/03/17/ChatGPT-talk-1-QNLP/"/>
    <id>https://levyya.github.io/2023/03/17/ChatGPT-talk-1-QNLP/</id>
    <published>2023-03-17T07:50:55.000Z</published>
    <updated>2023-03-17T12:08:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一些Demo"><a href="#一些Demo" class="headerlink" title="一些Demo"></a>一些Demo</h2><blockquote><details><summary>点击查看回复</summary>    <div style="background-color:#ecf7fe">    <pre><code>System.out.println("This is a test code line.");    </code></pre>    </div></details></blockquote><p><strong>Q: 请你基于pytorch设计一个量子启发式语言模型QNN，这个模型需要能够处理文本分类任务</strong></p><blockquote><details><summary>点击查看回复</summary><div style="background-color:#ecf7fe"><p>好的，我将提供一个基本的框架，让您可以根据需要进行调整和完善。</p><p>首先，我们需要安装必要的库：PyTorch, PennyLane, numpy, sklearn, matplotlib等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install torch pennylane numpy sklearn matplotlib</span><br></pre></td></tr></table></figure><p>接下来，我们可以开始处理数据集。这里以IMDB数据集为例，使用PyTorch的torchtext库进行数据处理和加载。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchtext</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载IMDB数据集</span></span><br><span class="line">TEXT = torchtext.data.Field(tokenize=<span class="string">&#x27;spacy&#x27;</span>, lower=<span class="literal">True</span>)</span><br><span class="line">LABEL = torchtext.data.LabelField(dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">train_data, test_data = torchtext.datasets.IMDB.splits(TEXT, LABEL)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建词典</span></span><br><span class="line">MAX_VOCAB_SIZE = <span class="number">25000</span></span><br><span class="line">TEXT.build_vocab(train_data, max_size=MAX_VOCAB_SIZE)</span><br><span class="line">LABEL.build_vocab(train_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分数据集</span></span><br><span class="line">BATCH_SIZE = <span class="number">64</span></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line">train_iterator, test_iterator = torchtext.data.BucketIterator.splits(</span><br><span class="line">(train_data, test_data), batch_size=BATCH_SIZE, device=device)</span><br></pre></td></tr></table></figure><p>接下来，我们可以搭建量子启发式语言模型QNN。这里使用PennyLane库来实现QNN。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pennylane <span class="keyword">as</span> qml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定量子神经网络结构</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qnn_layer</span>(<span class="params">inputs, weights</span>):</span><br><span class="line">    qml.templates.AngleEmbedding(inputs, wires=<span class="built_in">range</span>(n_qubits))</span><br><span class="line">    qml.templates.BasicEntanglerLayers(weights, wires=<span class="built_in">range</span>(n_qubits))</span><br><span class="line">    <span class="keyword">return</span> [qml.expval(qml.PauliZ(i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_qubits)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QNNTextClassifier</span>(torch.nn.Module):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n_qubits, vocab_size, emb_dim, hidden_dim, n_classes</span>):</span><br><span class="line">  <span class="built_in">super</span>().__init__()</span><br><span class="line">  self.embedding = torch.nn.Embedding(vocab_size, emb_dim)</span><br><span class="line">  self.qnn_layer = qml.qnode(qnn_layer, device=qml.device(<span class="string">&quot;default.qubit&quot;</span>, wires=n_qubits))</span><br><span class="line">  self.linear1 = torch.nn.Linear(n_qubits, hidden_dim)</span><br><span class="line">  self.linear2 = torch.nn.Linear(hidden_dim, n_classes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, inputs</span>):</span><br><span class="line">  x = self.embedding(inputs)</span><br><span class="line">  x = torch.transpose(x, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  qnn_inputs = torch.unbind(x, dim=<span class="number">0</span>)</span><br><span class="line">  qnn_weights = [qml.init.strong_ent_layers_normal(n_qubits, layer) <span class="keyword">for</span> layer <span class="keyword">in</span> <span class="built_in">range</span>(n_layers)]</span><br><span class="line">  qnn_results = [self.qnn_layer(qnn_inputs, qnn_weights)]</span><br><span class="line">  qnn_outputs = torch.stack(qnn_results, dim=<span class="number">0</span>)</span><br><span class="line">  qnn_outputs = torch.transpose(qnn_outputs, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">  x = self.linear1(qnn_outputs)</span><br><span class="line">  x = torch.relu(x)</span><br><span class="line">  x = self.linear2(x)</span><br><span class="line">  <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>接下来，我们可以进行模型训练和测试。这里使用交叉熵损失函数和Adam优化器进行训练。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置模型参数</span></span><br><span class="line">n_qubits = <span class="number">4</span></span><br><span class="line">n_layers = <span class="number">2</span></span><br><span class="line">vocab_size = <span class="built_in">len</span>(TEXT.vocab)</span><br><span class="line">emb_dim = <span class="number">100</span></span><br><span class="line">hidden_dim = <span class="number">32</span></span><br><span class="line">n_classes = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型并设定优化器和损失函数</span></span><br><span class="line">model = QNNText</span><br></pre></td></tr></table></figure></div></details></blockquote><p><strong>Q: 请用python构造一个量子启发式复数值神经网络</strong></p><blockquote><details><summary>点击查看回复</summary>    <div style="background-color:#ecf7fe">量子启发式复数值神经网络是一种新兴的深度学习方法，用于解决复杂的分类、回归和优化问题。它利用量子计算的思想，采用复数值权重和门控机制来增强网络的表达能力。在Python中，可以使用TensorFlow Quantum库来构建量子启发式复数值神经网络。<p>下面是一个简单的代码示例，用于构建一个量子启发式复数值神经网络：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> tensorflow_quantum <span class="keyword">as</span> tfq</span><br><span class="line"></span><br><span class="line">qubits = tfq.util.qubit_count([input_shape])</span><br><span class="line"></span><br><span class="line">model = tf.keras.Sequential([</span><br><span class="line">    tf.keras.layers.Input(shape=input_shape),</span><br><span class="line">    tfq.layers.PQC(</span><br><span class="line">        model_circuit=tfq.layers.ControlledPQC(</span><br><span class="line">            control_qids=[<span class="number">0</span>],</span><br><span class="line">            operations=[</span><br><span class="line">                tfq.layers.AddCircuit(</span><br><span class="line">                    cirq.Circuit(</span><br><span class="line">                        cirq.X(q) <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(qubits)</span><br><span class="line">                    )</span><br><span class="line">                ),</span><br><span class="line">                tfq.layers.ControlledPQC(</span><br><span class="line">                    control_qids=[<span class="number">1</span>],</span><br><span class="line">                    operations=[</span><br><span class="line">                        tfq.layers.AddCircuit(</span><br><span class="line">                            cirq.Circuit(</span><br><span class="line">                                cirq.Y(q) <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(qubits)</span><br><span class="line">                            )</span><br><span class="line">                        ),</span><br><span class="line">                        tfq.layers.Dense(</span><br><span class="line">                            <span class="number">2</span>,</span><br><span class="line">                            activation=<span class="string">&quot;softmax&quot;</span>,</span><br><span class="line">                            dtype=tf.complex64,</span><br><span class="line">                            name=<span class="string">&quot;output&quot;</span></span><br><span class="line">                        )</span><br><span class="line">                    ],</span><br><span class="line">                    differentiator=tfq.differentiators.ParameterShift()</span><br><span class="line">                )</span><br><span class="line">            ]</span><br><span class="line">        ),</span><br><span class="line">        initializer=tf.keras.initializers.RandomUniform(-<span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">        repetitions=<span class="number">4</span></span><br><span class="line">    )</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(</span><br><span class="line">    loss=tf.keras.losses.CategoricalCrossentropy(),</span><br><span class="line">    optimizer=tf.keras.optimizers.Adam(),</span><br><span class="line">    metrics=[tf.keras.metrics.CategoricalAccuracy()]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>以上代码使用了TensorFlow Quantum库中的tfq.layers.PQC类来定义量子启发式复数值神经网络。这个网络包含两个tfq.layers.ControlledPQC层，其中第一个层实现X门操作，第二个层实现Y门和Dense操作。这个网络还包含一个参数repetitions，用于指定网络的重复次数。</p><p>需要注意的是，这个示例代码仅仅是一个简单的示例，实际使用时需要根据具体的问题进行适当的修改。同时，由于量子计算和复数运算都是比较复杂的数学理论，因此建议使用者具备相关的数学和物理基础知识。<br> </p></div><p></p></details></blockquote><p><strong>Q: 量子启发式神经网络和经典神经网络的区别以及它的优势</strong></p><blockquote><details><summary>点击查看回复</summary><div style="background-color:#ecf7fe">量子启发式神经网络（Quantum-inspired Neural Network，QINN）和经典神经网络（Classical Neural Network，CNN）都是一种基于神经网络的模型，但它们在计算原理和性能方面存在显著差异。<p>首先，量子启发式神经网络利用了量子计算的思想，通过模拟量子行为来完成计算，而经典神经网络则使用传统的计算方式。在实现上，量子启发式神经网络通常需要借助量子计算库或者量子计算器件来实现。</p><p>其次，量子启发式神经网络在处理某些问题时具有经典神经网络无法比拟的优势。例如，量子启发式神经网络在处理大规模数据时可以更加高效地进行计算，而且能够更好地处理非线性问题。此外，量子计算的一些特性，如量子并行性、量子纠缠等，也可以为量子启发式神经网络的计算提供额外的优势。</p><p>另外，量子启发式神经网络还可以借鉴量子计算的一些算法和技术来优化网络结构和参数调整等方面。例如，量子主成分分析（Quantum Principal Component Analysis，QPCA）可以用来优化神经网络的权重和偏置参数，量子变分算法（Variational Quantum Algorithm，VQA）可以用来训练神经网络的参数。</p><p>总的来说，量子启发式神经网络相较于经典神经网络具有更高效、更灵活和更精确的计算能力，这使得它可以在某些任务上取得比经典神经网络更好的表现。然而，目前量子启发式神经网络的应用还处于起步阶段，需要进一步探索和发展。</p></div></details></blockquote><p><strong>Q: 请你描述一下量子启发式自然语言处理的研究背景与意义</strong></p><blockquote><details><summary>点击查看回复</summary><div style="background-color:#ecf7fe">自然语言处理（NLP）是人工智能领域的一个重要分支，它致力于让计算机理解和处理人类语言。在NLP中，许多任务都涉及到对大规模文本数据的处理和分析，例如文本分类、情感分析、语言模型等。传统的NLP方法通常基于经典计算机，但随着量子计算的发展，越来越多的研究者开始探索如何将量子计算的优势应用于NLP领域。<p>量子启发式自然语言处理（Quantum-inspired Natural Language Processing，QINLP）是一种利用量子计算思想和技术进行自然语言处理的新兴研究领域。QINLP并非直接使用量子计算机进行计算，而是受到量子计算理论和算法的启发，设计出一些基于经典计算机的算法和模型来解决NLP中的问题。QINLP的研究意义在于，通过借鉴量子计算的思想，可以提高NLP任务的处理效率和精度，同时为NLP和量子计算之间的交叉学科提供了新的研究方向。</p><p>QINLP的研究内容主要包括：量子语言模型、量子词向量表示、基于量子计算的文本分类、基于量子计算的机器翻译、量子信息检索等。例如，一些研究者已经尝试使用量子主成分分析（Quantum Principal Component Analysis，QPCA）来生成词向量，或者使用量子变分算法（Variational Quantum Algorithm，VQA）来训练文本分类模型。</p><p>总之，QINLP作为一个新兴的研究领域，不仅有助于提高NLP任务的效率和精度，还为NLP和量子计算之间的交叉学科提供了新的研究方向和思路。</p></div></details></blockquote><p><strong>Q: can you build a quantum-inspired language model with Python code</strong></p><blockquote><details style="background-color:#ecf7fe"><summary>点击查看回复</summary><p>Yes, you can build a quantum-inspired language model using Python code. Here is a simple example of a quantum-inspired language model that uses the Quantum Language Model (QLM) framework developed by IBM:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiskit <span class="keyword">import</span> QuantumRegister, ClassicalRegister, QuantumCircuit, Aer</span><br><span class="line"><span class="keyword">from</span> qiskit.circuit.library <span class="keyword">import</span> ZZFeatureMap</span><br><span class="line"><span class="keyword">from</span> qiskit.aqua.components.optimizers <span class="keyword">import</span> L_BFGS_B</span><br><span class="line"><span class="keyword">from</span> qiskit.aqua.algorithms <span class="keyword">import</span> VQE</span><br><span class="line"><span class="keyword">from</span> qiskit.aqua <span class="keyword">import</span> QuantumInstance</span><br><span class="line"><span class="keyword">from</span> qiskit.providers.aer <span class="keyword">import</span> QasmSimulator</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define a simple corpus of text</span></span><br><span class="line">corpus = [<span class="string">&quot;The quick brown fox jumps over the lazy dog&quot;</span>,</span><br><span class="line">       <span class="string">&quot;This is a test sentence&quot;</span>,</span><br><span class="line">       <span class="string">&quot;Natural language processing is an interesting field&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a feature map using the ZZFeatureMap from Qiskit</span></span><br><span class="line">feature_map = ZZFeatureMap(feature_dimension=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a quantum circuit to encode the text into a quantum state</span></span><br><span class="line">qr = QuantumRegister(feature_map.num_qubits)</span><br><span class="line">cr = ClassicalRegister(feature_map.num_qubits)</span><br><span class="line">qc = QuantumCircuit(qr, cr)</span><br><span class="line">qc.append(feature_map, [qr[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(feature_map.num_qubits)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a quantum instance for running the VQE algorithm</span></span><br><span class="line">backend = Aer.get_backend(<span class="string">&#x27;qasm_simulator&#x27;</span>)</span><br><span class="line">quantum_instance = QuantumInstance(backend, shots=<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define a cost function that measures the similarity between two quantum states</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cost_function</span>(<span class="params">params</span>):</span><br><span class="line"> qc_params = np.array(params)</span><br><span class="line"> qc_params = qc_params.reshape(feature_map.num_parameters, -<span class="number">1</span>)</span><br><span class="line"> qc_params = qc_params.T[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"> <span class="comment"># Create a new circuit and apply the parameterized gates to it</span></span><br><span class="line"> qc_new = QuantumCircuit(qr, cr)</span><br><span class="line"> qc_new.append(feature_map.bind_parameters(qc_params), [qr[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(feature_map.num_qubits)])</span><br><span class="line"></span><br><span class="line"> <span class="comment"># Compute the fidelity between the original circuit and the new circuit</span></span><br><span class="line"> job = backend.run(qc.combine(qc_new.inverse()), shots=<span class="number">1024</span>)</span><br><span class="line"> result = job.result().get_counts()</span><br><span class="line"> p0 = result.get(<span class="string">&#x27;00&#x27;</span>, <span class="number">0</span>) / <span class="number">1024</span></span><br><span class="line"> p1 = result.get(<span class="string">&#x27;01&#x27;</span>, <span class="number">0</span>) / <span class="number">1024</span></span><br><span class="line"> p2 = result.get(<span class="string">&#x27;10&#x27;</span>, <span class="number">0</span>) / <span class="number">1024</span></span><br><span class="line"> p3 = result.get(<span class="string">&#x27;11&#x27;</span>, <span class="number">0</span>) / <span class="number">1024</span></span><br><span class="line"> f = <span class="number">0.25</span> * (p0 + p3 - p1 - p2)</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span> - f</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the VQE algorithm to optimize the circuit parameters</span></span><br><span class="line">optimizer = L_BFGS_B(maxfun=<span class="number">1000</span>)</span><br><span class="line">vqe = VQE(feature_map, optimizer)</span><br><span class="line">result = vqe.run(quantum_instance)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the optimized circuit parameters</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Optimized circuit parameters:&quot;</span>, result.optimal_point)</span><br></pre></td></tr></table></figure><p>This code creates a feature map using the ZZFeatureMap class from Qiskit, which maps the input text to a quantum state. It then defines a cost function that measures the similarity between two quantum states, and uses the Variational Quantum Eigensolver (VQE) algorithm to optimize the parameters of the quantum circuit. Finally, the code prints the optimized circuit parameters.</p><p>Note that this is just a simple example, and there are many ways to build a quantum-inspired language model using Python and other programming languages. The details of the implementation will depend on the specific framework and techniques used.</p></details></blockquote><p><strong>Q: what is the quantum-inspired language model</strong></p><blockquote><details><summary>点击查看回复</summary>    <div style="background-color:#ecf7fe">A quantum-inspired language model is a type of natural language processing (NLP) model that is inspired by the principles of quantum computing. Unlike a true quantum language model, which uses quantum bits (qubits) and quantum gates to process information, a quantum-inspired language model is a classical model that incorporates some of the mathematical concepts and techniques from quantum computing.<p>One example of a quantum-inspired language model is the Quantum Language Model (QLM) developed by IBM. The QLM uses a mathematical framework called quantum probability theory to represent and manipulate natural language data. This framework allows the QLM to model the complex relationships between words in a sentence and to capture the inherent uncertainty and ambiguity of natural language.</p><p>Another example of a quantum-inspired language model is the Variational Quantum Language Model (VQLM) developed by researchers at the University of Oxford. The VQLM uses a variational quantum circuit to generate word embeddings, which are then used to construct a language model. The VQLM is designed to work with small quantum devices and can be trained using a classical optimizer.</p><p>While quantum-inspired language models do not provide the same computational advantages as true quantum language models, they are still an active area of research and have shown promise in certain NLP tasks, such as language modeling and machine translation. As the field of quantum computing continues to evolve, it is likely that we will see more advanced quantum-inspired language models and other quantum-inspired approaches to natural language processing.</p> </div></details></blockquote><p><strong>Q: Tell me the latest researches in quantum natural language processing</strong></p><blockquote><details><summary>点击查看回复</summary>    <div style="background-color:#ecf7fe">Quantum Natural Language Processing (QNLP) is a rapidly growing field that explores the application of quantum computing to the analysis and processing of natural language data. While still in its early stages, QNLP research has produced some promising results, and there are several ongoing research projects in this area. Here are a few recent examples:<br><br>    1. Quantum Language Modeling: Researchers at the University of Southern California have developed a quantum language model that can predict the next word in a sentence using quantum computing techniques. The model was tested on several datasets, including the Penn Treebank dataset, and was found to outperform classical language models in terms of accuracy.<br><br>    2. Quantum Neural Networks for NLP: Researchers at the University of Toronto have developed a quantum neural network for natural language processing. The network uses quantum computing techniques to perform operations such as matrix multiplication and activation functions, and was tested on several NLP tasks, including sentiment analysis and named entity recognition. The researchers found that the quantum neural network outperformed classical neural networks on some of these tasks.<br><br>    3. Quantum Sentiment Analysis: Researchers at the University of Waterloo have developed a quantum algorithm for sentiment analysis. The algorithm uses a quantum feature mapping technique to convert sentences into quantum states, which are then classified using a quantum support vector machine. The researchers found that the quantum algorithm outperformed classical sentiment analysis methods on some datasets.<br><br>    4. Quantum Language Generation: Researchers at the University of Maryland have developed a quantum algorithm for generating coherent text. The algorithm uses a quantum language model to generate a distribution over possible sentences, which is then sampled to generate coherent text. The researchers found that the quantum algorithm generated text that was more coherent than classical language generation methods.<br><br>These are just a few examples of the latest research in quantum natural language processing. As quantum computing technology continues to advance, it is likely that we will see many more exciting developments in this field in the coming years. </div></details></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一些Demo&quot;&gt;&lt;a href=&quot;#一些Demo&quot; class=&quot;headerlink&quot; title=&quot;一些Demo&quot;&gt;&lt;/a&gt;一些Demo&lt;/h2&gt;&lt;blockquote&gt;
&lt;details&gt;
&lt;summary&gt;点击查看回复&lt;/summary&gt;
    &lt;div</summary>
      
    
    
    
    
    <category term="ChatGPT" scheme="https://levyya.github.io/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>AvWing record--20230316</title>
    <link href="https://levyya.github.io/2023/03/16/AvWing-record-20230316/"/>
    <id>https://levyya.github.io/2023/03/16/AvWing-record-20230316/</id>
    <published>2023-03-16T11:43:59.000Z</published>
    <updated>2023-03-19T11:59:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="T2-01背包问题"><a href="#T2-01背包问题" class="headerlink" title="T2 01背包问题"></a>T2 01背包问题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, v;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; v;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">weight</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">value</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cin &gt;&gt; weight[i] &gt;&gt; value[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//vector&lt;vector&lt;int&gt; &gt; dp(n + 1, vector&lt;int&gt; (v + 1, 0));</span></span><br><span class="line"><span class="comment">//for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="comment">//for (int j = 0; j &lt;= v; j++) &#123;</span></span><br><span class="line"><span class="comment">//dp[i+1][j] = dp[i][j];</span></span><br><span class="line"><span class="comment">//if (j &lt; weight[i]) continue;</span></span><br><span class="line"><span class="comment">//dp[i+1][j] = max(dp[i][j], dp[i][j-weight[i]] + value[i]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; dp[n][v];</span></span><br><span class="line"><span class="comment">// optimize</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(v + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = v; j &gt;= weight[i]; j--) &#123;</span><br><span class="line">dp[j] = <span class="built_in">max</span>(dp[j], dp[j-weight[i]] + value[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[v];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T3-完全背包问题"><a href="#T3-完全背包问题" class="headerlink" title="T3 完全背包问题"></a>T3 完全背包问题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Levy on 2023/3/16.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    <span class="type">int</span> n, v;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; v;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">weight</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">value</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; weight[i] &gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    vector&lt;vector&lt;int&gt; &gt; dp(n+1, vector&lt;int&gt; (v+1, 0));</span></span><br><span class="line"><span class="comment">//    for (int j = 0; j &lt;= v; j++) &#123;</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; n; i++) &#123;</span></span><br><span class="line"><span class="comment">//            dp[i+1][j] = dp[i][j];</span></span><br><span class="line"><span class="comment">//            if (j &lt; weight[i]) continue;</span></span><br><span class="line"><span class="comment">//            dp[i+1][j] = max(dp[i][j], dp[i+1][j-weight[i]] + value[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; dp[n][v];</span></span><br><span class="line">    <span class="comment">// optimize</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(v+<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = weight[i]; j &lt;= v; j++) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j-weight[i]] + value[i], dp[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[v];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T4-多重背包问题-I"><a href="#T4-多重背包问题-I" class="headerlink" title="T4 多重背包问题 I"></a>T4 多重背包问题 I</h2><p>将相同的多个物品看作是一个物品，然后按照01背包计算</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Levy on 2023/3/19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;cmath&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; v;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(v+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> weight;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        cin &gt;&gt; weight &gt;&gt; value &gt;&gt; cnt;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; cnt; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = v; k &gt;= weight; k--) &#123;</span><br><span class="line">                <span class="comment">// 01背包</span></span><br><span class="line">                dp[k] = <span class="built_in">max</span>(dp[k], dp[k-weight] + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[v];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T5-多重背包问题-II"><a href="#T5-多重背包问题-II" class="headerlink" title="T5 多重背包问题 II"></a>T5 多重背包问题 II</h2><p>题意和I一样，数据集范围变大，上一种解法复杂度为$O(n^3)$，这里需要至少$O(n^2lgn)$复杂度才能不超时。</p><p>利用二进制优化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Levy on 2023/3/19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; v;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; weights;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; values;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(v+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> weight;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        <span class="type">int</span> cnt;</span><br><span class="line">        cin &gt;&gt; weight &gt;&gt; value &gt;&gt; cnt;</span><br><span class="line">        <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; j &lt;= cnt; j &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            weights.<span class="built_in">emplace_back</span>(j * weight);</span><br><span class="line">            values.<span class="built_in">emplace_back</span>(j * value);</span><br><span class="line">            cnt -= j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnt &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            weights.<span class="built_in">emplace_back</span>(cnt * weight);</span><br><span class="line">            values.<span class="built_in">emplace_back</span>(cnt * value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; weights.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = v; j &gt;= weights[i]; j--) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j-weights[i]] + values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[v];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="T35-反转链表"><a href="#T35-反转链表" class="headerlink" title="T35 反转链表"></a>T35 反转链表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// if (head == NULL) &#123;</span></span><br><span class="line">        <span class="comment">//     return head;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// ListNode* preHead = new ListNode(0);</span></span><br><span class="line">        <span class="comment">// preHead-&gt;next = head;</span></span><br><span class="line">        <span class="comment">// head = head-&gt;next;</span></span><br><span class="line">        <span class="comment">// preHead-&gt;next-&gt;next = NULL;</span></span><br><span class="line">        <span class="comment">// while (head != NULL) &#123;</span></span><br><span class="line">        <span class="comment">//     ListNode* p = head-&gt;next;</span></span><br><span class="line">        <span class="comment">//     head-&gt;next = preHead-&gt;next;</span></span><br><span class="line">        <span class="comment">//     preHead-&gt;next = head;</span></span><br><span class="line">        <span class="comment">//     head = p;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// return preHead-&gt;next;</span></span><br><span class="line">        ListNode* prev = <span class="literal">nullptr</span>;</span><br><span class="line">        ListNode* cur = head;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            ListNode* next = cur-&gt;next;</span><br><span class="line">            cur-&gt;next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="T446-统计单词数"><a href="#T446-统计单词数" class="headerlink" title="T446 统计单词数"></a>T446 统计单词数</h2><p>注意完整单词，在<code>word</code>前后加上空格判断！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Levy on 2023/3/19.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string word;</span><br><span class="line">    string sent;</span><br><span class="line">    <span class="built_in">getline</span>(cin, word);</span><br><span class="line">    <span class="built_in">getline</span>(cin, sent);</span><br><span class="line">    <span class="built_in">transform</span>(word.<span class="built_in">begin</span>(), word.<span class="built_in">end</span>(), word.<span class="built_in">begin</span>(), ::tolower);</span><br><span class="line">    <span class="built_in">transform</span>(sent.<span class="built_in">begin</span>(), sent.<span class="built_in">end</span>(), sent.<span class="built_in">begin</span>(), ::tolower);</span><br><span class="line">    word = <span class="string">&#x27; &#x27;</span> + word + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    sent = <span class="string">&#x27; &#x27;</span> + sent + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="comment">//    cout &lt;&lt; word &lt;&lt; endl &lt;&lt; sent;</span></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> first_index = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> pos = sent.<span class="built_in">find</span>(word);</span><br><span class="line">    <span class="keyword">while</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span> (first_index == <span class="number">-1</span>) &#123;</span><br><span class="line">            first_index = pos;</span><br><span class="line">        &#125;</span><br><span class="line">        pos = sent.<span class="built_in">find</span>(word, pos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; cnt &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; first_index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;T2-01背包问题&quot;&gt;&lt;a href=&quot;#T2-01背包问题&quot; class=&quot;headerlink&quot; title=&quot;T2 01背包问题&quot;&gt;&lt;/a&gt;T2 01背包问题&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    
    <category term="默认标签" scheme="https://levyya.github.io/tags/%E9%BB%98%E8%AE%A4%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>ChatGPT</title>
    <link href="https://levyya.github.io/2023/02/22/ChatGPT/"/>
    <id>https://levyya.github.io/2023/02/22/ChatGPT/</id>
    <published>2023-02-22T08:24:01.000Z</published>
    <updated>2023-02-22T08:56:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://cdn.openai.com/papers/Training_language_models_to_follow_instructions_with_human_feedback.pdf">InstructGPT论文地址</a></p><p><a href="https://www.bilibili.com/video/BV1hd4y187CR/?spm_id_from=333.999.0.0&vd_source=53b8cc6488ce514ed3a9458e8e4f939a">InstructGPT 论文精读 (李沐)</a></p></blockquote><h2 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h2><p>Open AI发布的一个引起广泛关注的产品。</p><p>这里主要讲Open AI不久前发布的一篇论文 (InstructGPT) 的一些内容，ChatGPT使用的技术也是基于这项工作以及更早的GPT系列模型。</p><p>InstructGPT是一个对话模型，找了一些外包来标注数据，使用微调和强化学习来优化模型输出，使用比GPT-3小100倍的模型，输出结果更符合人们的期望，在一些数据集上效果也不错。在这项工作中，研究者对模型生成的文本非常关注以下三点：</p><ul><li>有用性</li><li>真实性</li><li>无害性</li></ul><p>按paper原话说就是想和人期望的输出align（对齐）。</p><h2 id="InstructGPT使用的技术"><a href="#InstructGPT使用的技术" class="headerlink" title="InstructGPT使用的技术"></a>InstructGPT使用的技术</h2><p><strong>Prompt dataset</strong></p><p>提示学习，告诉模型我们想要什么。</p><img src="/2023/02/22/ChatGPT/image-20230222164446999.png" class alt="image-20230222164446999"><p>图：InstructGPT中使用的提示数据集种类</p><p><strong>SFT (Supervised Fine-Tuning)</strong></p><p>首先在GPT-3上用Prompt数据集微调</p><p><strong>RM (Reward modeling)</strong></p><p>奖励建模，labelers给模型的多个输出排序，再重新训练</p><img src="/2023/02/22/ChatGPT/image-20230222165406796.png" class alt="image-20230222165406796"><p>图：奖励模型的损失函数 (Pairwise 排序损失)</p><p><strong>PPO</strong></p><p>一种强化学习方法，也是Open AI提出来的。</p><p>强化学习，RM和PPO是同时进行的，用PPO优化RM。</p><img src="/2023/02/22/ChatGPT/image-20230222165505813.png" class alt="image-20230222165505813"><p>图：PPO的优化目标</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://cdn.openai.com/papers/Training_language_</summary>
      
    
    
    
    
    <category term="ChatGPT" scheme="https://levyya.github.io/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>歌词--生命因你而火热</title>
    <link href="https://levyya.github.io/2023/02/21/%E6%AD%8C%E8%AF%8D-%E7%94%9F%E5%91%BD%E5%9B%A0%E4%BD%A0%E8%80%8C%E7%81%AB%E7%83%AD/"/>
    <id>https://levyya.github.io/2023/02/21/%E6%AD%8C%E8%AF%8D-%E7%94%9F%E5%91%BD%E5%9B%A0%E4%BD%A0%E8%80%8C%E7%81%AB%E7%83%AD/</id>
    <published>2023-02-21T12:15:20.000Z</published>
    <updated>2023-02-21T12:16:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>新裤子</p><blockquote><p>勇敢的你</p><p>站在这里</p><p>脸庞清瘦却骄傲</p><p>在这远方</p><p>没人陪伴</p><p>只有幻想和烦恼</p><p>无聊的 渺小的 反对不公平的世界</p><p>没能继续的革命</p><p>不欢而散的告别</p><p>我倒下后</p><p>不敢回头</p><p>不能再见的朋友</p><p>有人堕落</p><p>有人疯了</p><p>有人随着风去了</p><p>我难过</p><p>我不得不去工作</p><p>在大楼的一个角落</p><p>格子间的女孩</p><p>时间久了也很美</p><p>我会和她结婚</p><p>带我去小城过年</p><p>忘了吧那摇滚乐</p><p>奔腾不复的时代</p><p>我倒下后</p><p>不敢回头</p><p>被社会伤害的人们</p><p>有人堕落</p><p>有人疯了</p><p>有人随着风去了</p><p>那些昙花一现的灿烂</p><p>是爆炸的烟火</p><p>那一团耀眼的火焰</p><p>在燃烧着你和我</p><p>那刻骨铭心的恋爱</p><p>总带给我伤害</p><p>那平淡如水的生活</p><p>因为你而火热</p><p>勇敢的你</p><p>站在这里</p><p>脸庞清瘦却骄傲</p><p>在这远方</p><p>没人陪伴</p><p>只有幻想和烦恼</p><p>我倒下后</p><p>不敢回头</p><p>不能再见的朋友</p><p>有人堕落</p><p>有人疯了</p><p>有人随着风去了</p><p>那些昙花一现的灿烂</p><p>是爆炸的烟火</p><p>那一团耀眼的火焰</p><p>在燃烧着你和我</p><p>那刻骨铭心的恋爱</p><p>总带给我伤害</p><p>那平淡如水的生活</p><p>因为你而火热</p><p>那些昙花一现的灿烂</p><p>是爆炸的烟火</p><p>那一团耀眼的火焰</p><p>在燃烧着你和我</p><p>那刻骨铭心的恋爱</p><p>总带给我伤害</p><p>那平淡如水的生活</p><p>因为你而火热</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新裤子&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;勇敢的你&lt;/p&gt;
&lt;p&gt;站在这里&lt;/p&gt;
&lt;p&gt;脸庞清瘦却骄傲&lt;/p&gt;
&lt;p&gt;在这远方&lt;/p&gt;
&lt;p&gt;没人陪伴&lt;/p&gt;
&lt;p&gt;只有幻想和烦恼&lt;/p&gt;
&lt;p&gt;无聊的 渺小的 反对不公平的世界&lt;/p&gt;
&lt;p&gt;没能继续的革命&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="歌词" scheme="https://levyya.github.io/tags/%E6%AD%8C%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="https://levyya.github.io/2023/02/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://levyya.github.io/2023/02/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2023-02-20T13:07:08.000Z</published>
    <updated>2023-03-19T05:21:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://eajack.github.io/2020/07/03/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-C%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0%E3%80%8BC++%E5%AE%9E%E7%8E%B0%EF%BC%88CPP%20%E9%87%8D%E6%9E%84%E7%89%88%E6%9C%AC%EF%BC%89/">学习参考</a></p></blockquote><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>b树，b+树</p><p>红黑树</p><p>场景</p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><blockquote><p>计算机科学中的图论是研究图（Graph）及其在各领域中的应用的一个分支。以下是常见的图论算法：</p><ol><li>最短路径算法</li></ol><ul><li>Dijkstra算法：用于求带权重有向图的单源最短路径。</li><li>Bellman-Ford算法：用于求带权重有向图的单源最短路径，可以处理负权重边的情况。</li><li>Floyd-Warshall算法：用于求带权重的有向图或无向图中所有点对的最短路径。</li></ul><ol start="2"><li>最小生成树算法</li></ol><ul><li>Prim算法：用于求无向图的最小生成树。</li><li>Kruskal算法：用于求无向图的最小生成树。</li></ul><ol start="3"><li>拓扑排序算法</li></ol><ul><li>拓扑排序算法：用于有向无环图的顶点排序。</li></ul><ol start="4"><li>最大流算法</li></ol><ul><li>Ford-Fulkerson算法：用于求网络流中的最大流量。</li><li>Edmonds-Karp算法：是Ford-Fulkerson算法的一种实现，其时间复杂度为O(E^2 * V)。</li></ul><ol start="5"><li>最小割算法</li></ol><ul><li>Stoer-Wagner算法：用于求无向图的最小割，时间复杂度为O(V^3)。</li><li>Karger算法：用于求无向图的最小割，时间复杂度为O(V^4 * logV)。</li></ul><ol start="6"><li>图匹配算法</li></ol><ul><li>Hopcroft-Karp算法：用于求二分图的最大匹配，时间复杂度为O(E * sqrt(V))。</li></ul><ol start="7"><li>点双联通分量和边双联通分量算法</li></ol><ul><li>Tarjan算法：用于有向或无向图的点双联通分量和边双联通分量的计算。</li></ul><ol start="8"><li>强连通分量算法</li></ol><ul><li>Kosaraju算法：用于有向图的强连通分量的计算。</li><li>Tarjan算法：用于有向图的强连通分量的计算，时间复杂度为O(V+E)。</li></ul><ol start="9"><li>欧拉路径算法</li></ol><ul><li>Fleury算法：用于无向图的欧拉路径的计算。</li><li>Hierholzer算法：用于无向图或有向图的欧拉路径的计算，时间复杂度为O(E)。</li></ul><p>以上是图论中常见的一些算法，每种算法都有不同的应用场景和特点。</p></blockquote><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Method 1</span></span><br><span class="line"><span class="comment">// Separate chainning method: </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashMap</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">HashMap1</span>();</span><br><span class="line">    <span class="built_in">HashMap1</span>(<span class="type">int</span> size);</span><br><span class="line">    <span class="built_in">HashMap1</span>(<span class="type">int</span> size, <span class="type">const</span> <span class="type">int</span> keys[], <span class="type">int</span> N);</span><br><span class="line">    ~<span class="built_in">HashMap1</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1. 下一个质数，用来更新size</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nextPrime</span><span class="params">(<span class="type">int</span> N)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">hashFunction</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> key)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;std::vector&lt;HashNode1&gt;&gt; hashMap1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考<a href="https://www.cnblogs.com/kuillldan/p/6079992.html">博客</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Method2</span></span><br><span class="line"><span class="comment">// 开放定址法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTable</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">KeyValue</span> &#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">KeyValue</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// get and set</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Object[] table;</span><br><span class="line">    <span class="type">private</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">currentAmmount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashTable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.table = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.maxSize];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashTable</span><span class="params">(<span class="type">int</span> maxSize)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == maxSize || maxSize &lt; <span class="number">0</span> || maxSize &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;Illegal maxSize!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        <span class="built_in">this</span>.table = <span class="keyword">new</span> <span class="title class_">Info</span>[maxSize];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> Math.abs(key.hashCode()) % <span class="built_in">this</span>.maxSize;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">this</span>.table[hashCode] != <span class="literal">null</span> &amp;&amp; (<span class="built_in">this</span>.currentAmount &lt; <span class="built_in">this</span>.maxSize)) &#123;</span><br><span class="line">            hashCode++;</span><br><span class="line">            hashCode = hashCode % <span class="built_in">this</span>.maxSize;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.currentAmount == <span class="built_in">this</span>.maxSize) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hash table is out of memory!&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.table[hashCode] = <span class="keyword">new</span> <span class="title class_">KeyValue</span>(key, value);</span><br><span class="line">            <span class="built_in">this</span>.currentAmount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> math.abs(key.hashCode()) % <span class="built_in">this</span>.maxSize;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">this</span>.table[hashCode] != <span class="literal">null</span> &amp;&amp; count &lt; <span class="built_in">this</span>.maxSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (((KeyValue) <span class="built_in">this</span>.table[hashCode]).getKey().equals(key)) &#123;</span><br><span class="line">                <span class="built_in">this</span>.table[hashCode] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            hashCode++;</span><br><span class="line">            hashCode = hashCode % <span class="built_in">this</span>.maxSize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hashCode</span> <span class="operator">=</span> Math.abs(key.hashCode()) % <span class="built_in">this</span>.maxSize;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">this</span>.table[hashCode] != <span class="literal">null</span> &amp;&amp; count &lt; <span class="built_in">this</span>.maxSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.equals(((KeyValue) <span class="built_in">this</span>.table[hashCode]).getKey())) &#123;</span><br><span class="line">                <span class="keyword">return</span> ((KeyValue) <span class="built_in">this</span>.table[hashCode]).getValue();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            hashCode++;</span><br><span class="line">            count++;</span><br><span class="line">            hashCode = hashCode % <span class="built_in">this</span>.maxSize;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>插入排序</p><ul><li>直接插入</li><li>Shell排序 O(n^1.3) 不稳定</li></ul><p>选择排序</p><ul><li>直接选择 不稳定</li><li>堆排序 不稳定</li></ul><p>交换排序</p><ul><li>冒泡排序 稳定</li><li>快速排序 不稳定</li></ul><p>归并排序 稳定</p><p>基数排序 稳定</p><p>快速排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://eajack.github.io/2020/07/03/%E3%80%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%</summary>
      
    
    
    
    <category term="计算机" scheme="https://levyya.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
    <category term="数据结构" scheme="https://levyya.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>歌词--火车</title>
    <link href="https://levyya.github.io/2023/02/20/%E6%AD%8C%E8%AF%8D-%E7%81%AB%E8%BD%A6/"/>
    <id>https://levyya.github.io/2023/02/20/%E6%AD%8C%E8%AF%8D-%E7%81%AB%E8%BD%A6/</id>
    <published>2023-02-20T11:24:04.000Z</published>
    <updated>2023-02-20T11:24:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我那些残梦 灵异九霄</p><p>徒忙漫奋斗 满目沧愁</p><p>在滑翔之后 完美坠落</p><p>在四维宇宙 眩目遨游</p><p>我那些烂曲 流窜九州</p><p>云游魂飞奏 音愤符吼</p><p>在宿命身后 不停挥手</p><p>视死如归仇 毫无保留</p><p>黑色的不是夜晚 是漫长的孤单</p><p>看脚下一片黑暗 望头顶星光璀璨</p><p>叹世万物皆可盼 唯真爱最短暂</p><p>失去的永不复返 世守恒而今倍还</p><p>摇旗呐喊的热情 携光阴渐远去</p><p>人世间悲喜烂剧 昼夜轮播不停</p><p>纷飞的滥情男女 情仇爱恨别离</p><p>一代人终将老去 但总有人正年轻</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我那些残梦 灵异九霄&lt;/p&gt;
&lt;p&gt;徒忙漫奋斗 满目沧愁&lt;/p&gt;
&lt;p&gt;在滑翔之后 完美坠落&lt;/p&gt;
&lt;p&gt;在四维宇宙 眩目遨游&lt;/p&gt;
&lt;p&gt;我那些烂曲 流窜九州&lt;/p&gt;
&lt;p&gt;云游魂飞奏 音愤符吼&lt;/p&gt;
&lt;p&gt;在宿命身后 不停挥手&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="歌词" scheme="https://levyya.github.io/tags/%E6%AD%8C%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>歌词--花火 (新裤子)</title>
    <link href="https://levyya.github.io/2023/02/20/%E6%AD%8C%E8%AF%8D-%E8%8A%B1%E7%81%AB-%E6%96%B0%E8%A3%A4%E5%AD%90/"/>
    <id>https://levyya.github.io/2023/02/20/%E6%AD%8C%E8%AF%8D-%E8%8A%B1%E7%81%AB-%E6%96%B0%E8%A3%A4%E5%AD%90/</id>
    <published>2023-02-20T11:16:16.000Z</published>
    <updated>2023-02-20T11:23:29.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一场没有结局的表演</p><p>包含所有荒谬和疯狂</p><p>像个孩子一样满怀悲伤</p><p>静悄悄地睡在大地上</p><p>现在我 有些倦了</p><p>倦得像一朵被风折断的野花</p><p>所以我 开始变了</p><p>变得像一团滚动炽热的花火</p><p>看着眼前欢笑骄傲的人群</p><p>心中泛起汹涌浪花</p><p>跳着放荡的舞蹈穿行在旷野</p><p>感到狂野 破碎辉煌</p><p>现在我 有些醉了</p><p>醉得像一只找不到方向的野鸽</p><p>所以我 开始变了</p><p>变得像一团暴烈炽热的花火</p><p>现在我 有些醉了</p><p>醉得像一只找不到方向的野鸽</p><p>所以我 开始变了</p><p>变得像一团暴烈炽热的花火</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;这是一场没有结局的表演&lt;/p&gt;
&lt;p&gt;包含所有荒谬和疯狂&lt;/p&gt;
&lt;p&gt;像个孩子一样满怀悲伤&lt;/p&gt;
&lt;p&gt;静悄悄地睡在大地上&lt;/p&gt;
&lt;p&gt;现在我 有些倦了&lt;/p&gt;
&lt;p&gt;倦得像一朵被风折断的野花&lt;/p&gt;
&lt;p&gt;所以我 开始变了&lt;/p&gt;
&lt;p&gt;变</summary>
      
    
    
    
    
    <category term="歌词" scheme="https://levyya.github.io/tags/%E6%AD%8C%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>歌词--没有理想的人不伤心</title>
    <link href="https://levyya.github.io/2023/02/20/%E6%AD%8C%E8%AF%8D-%E6%B2%A1%E6%9C%89%E7%90%86%E6%83%B3%E7%9A%84%E4%BA%BA%E4%B8%8D%E4%BC%A4%E5%BF%83/"/>
    <id>https://levyya.github.io/2023/02/20/%E6%AD%8C%E8%AF%8D-%E6%B2%A1%E6%9C%89%E7%90%86%E6%83%B3%E7%9A%84%E4%BA%BA%E4%B8%8D%E4%BC%A4%E5%BF%83/</id>
    <published>2023-02-20T11:15:55.000Z</published>
    <updated>2023-02-20T11:18:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我最爱去的唱片店</p><p>昨天是她的最后一天</p><p>曾经让我陶醉的碎片</p><p>全都散落在街边</p><p>我最爱去的书店</p><p>她也没撑过这个夏天</p><p>回忆文字流淌着怀念</p><p>可是已没什么好怀念</p><p>可是你曾经的那些梦</p><p>都已变得模糊看不见</p><p>那些为了理想的战斗</p><p>也不过为了钱</p><p>可是我最恨的那个人</p><p>他始终没死在我面前</p><p>还没年轻就变得苍老</p><p>这一生无解</p><p>没有我的空间</p><p>没有我的空间</p><p>没有我的空间</p><p>没有我的空间</p><p>你曾热爱的那个人</p><p>这一生也不会再见面</p><p>你等在这文化的废墟上</p><p>已没人觉得你狂野</p><p>那些让人敬仰的神殿</p><p>只在无知的人心中灵验</p><p>我住在属于我的猪圈</p><p>这一夜无眠</p><p>我不要在失败孤独中死去</p><p>我不要一直活在地下里</p><p>物质的骗局</p><p>匆匆的蚂蚁</p><p>没有文化的人不伤心</p><p>我不要在失败孤独中死去</p><p>我不要一直活在地下里</p><p>物质的骗局</p><p>匆匆的蚂蚁</p><p>没有文化的人不伤心</p><p>他不伤心</p><p>我最爱去的唱片店</p><p>昨天是她的最后一天</p><p>曾经让我陶醉的碎片</p><p>全都散落在街边</p><p>我最爱去的书店</p><p>她也没撑过这个夏天</p><p>回忆文字流淌着怀念</p><p>已不能怀念</p><p>我不要在失败孤独中死去</p><p>我不要一直活在地下里</p><p>物质的骗局</p><p>匆匆的蚂蚁</p><p>没有文化的人不伤心</p><p>我不要在失败孤独中死去</p><p>我不要一直活在地下里</p><p>物质的骗局</p><p>匆匆的蚂蚁</p><p>没有文化的人不伤心</p><p>他不伤心</p><p>我不要在失败孤独中死去</p><p>我不要一直活在地下里</p><p>物质的骗局</p><p>匆匆的蚂蚁</p><p>没有文化的人不伤心</p><p>我不要在失败孤独中死去</p><p>我不要一直活在地下里</p><p>物质的骗局</p><p>匆匆的蚂蚁</p><p>没有文化的人不伤心</p><p>他不会伤心</p><p>他不会伤心</p><p>他不会伤心</p><p>他不会伤心</p><p>他也会伤心</p><p>他也会伤心</p><p>他也会伤心</p><p>伤心</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我最爱去的唱片店&lt;/p&gt;
&lt;p&gt;昨天是她的最后一天&lt;/p&gt;
&lt;p&gt;曾经让我陶醉的碎片&lt;/p&gt;
&lt;p&gt;全都散落在街边&lt;/p&gt;
&lt;p&gt;我最爱去的书店&lt;/p&gt;
&lt;p&gt;她也没撑过这个夏天&lt;/p&gt;
&lt;p&gt;回忆文字流淌着怀念&lt;/p&gt;
&lt;p&gt;可是已没什么好怀念&lt;</summary>
      
    
    
    
    
    <category term="歌词" scheme="https://levyya.github.io/tags/%E6%AD%8C%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>歌词--白日梦蓝</title>
    <link href="https://levyya.github.io/2023/02/20/%E6%AD%8C%E8%AF%8D-%E7%99%BD%E6%97%A5%E6%A2%A6%E8%93%9D/"/>
    <id>https://levyya.github.io/2023/02/20/%E6%AD%8C%E8%AF%8D-%E7%99%BD%E6%97%A5%E6%A2%A6%E8%93%9D/</id>
    <published>2023-02-20T11:15:32.000Z</published>
    <updated>2023-02-20T11:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>青春是青涩的年代</p><p>我明白 明天不会有色彩</p><p>社会是伤害的比赛</p><p>当我醒来时才明白</p><p>请你不要离开</p><p>这里胜似花开</p><p>没有人能够掩盖</p><p>梦境中的色彩</p><p>请你不要离开</p><p>这里胜似花开</p><p>没有人会去涂改</p><p>梦境中的色彩</p><p>头上蓝色时光流淌</p><p>空荡的世界沮丧</p><p>请你不要离开</p><p>这里胜似花开</p><p>没有人能够掩盖</p><p>梦境中的色彩</p><p>请你不要离开</p><p>这里胜似花开</p><p>没有人会去涂改</p><p>梦境中的色彩</p><p>青春是青涩的年代</p><p>我明白 明天不会有色彩</p><p>社会是伤害的比赛</p><p>当我醒来时才明白</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;青春是青涩的年代&lt;/p&gt;
&lt;p&gt;我明白 明天不会有色彩&lt;/p&gt;
&lt;p&gt;社会是伤害的比赛&lt;/p&gt;
&lt;p&gt;当我醒来时才明白&lt;/p&gt;
&lt;p&gt;请你不要离开&lt;/p&gt;
&lt;p&gt;这里胜似花开&lt;/p&gt;
&lt;p&gt;没有人能够掩盖&lt;/p&gt;
&lt;p&gt;梦境中的色彩&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="歌词" scheme="https://levyya.github.io/tags/%E6%AD%8C%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>EndNote 使用</title>
    <link href="https://levyya.github.io/2023/02/04/EndNote-%E4%BD%BF%E7%94%A8/"/>
    <id>https://levyya.github.io/2023/02/04/EndNote-%E4%BD%BF%E7%94%A8/</id>
    <published>2023-02-04T03:17:57.000Z</published>
    <updated>2023-02-04T09:12:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Import-Option"><a href="#Import-Option" class="headerlink" title="Import Option"></a>Import Option</h1><p>Web of science：ISI-CE</p><p>pubmed、scopus、ScienceDirect ： Reference Manager(RIS)</p><p>知网、万方、维普：EndNote import</p><p>google scholar： EndNote generated XML</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Import-Option&quot;&gt;&lt;a href=&quot;#Import-Option&quot; class=&quot;headerlink&quot; title=&quot;Import Option&quot;&gt;&lt;/a&gt;Import Option&lt;/h1&gt;&lt;p&gt;Web of science：ISI-CE&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="EndNote" scheme="https://levyya.github.io/tags/EndNote/"/>
    
  </entry>
  
</feed>
